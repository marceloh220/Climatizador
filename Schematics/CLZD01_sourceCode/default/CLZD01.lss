
CLZD01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000d3  00800060  00800060  000002d4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007a  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001da  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000118  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000282  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012a  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000056  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	11 e0       	ldi	r17, 0x01	; 1
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 33       	cpi	r26, 0x33	; 51
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	e5 d0       	rcall	.+458    	; 0x206 <main>
  3c:	0f c1       	rjmp	.+542    	; 0x25c <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_5>:
static uint8_t interadorEnvio;		//interador para envio dos dados
static uint16_t volatile envio;		//cache para envio de dados
static uint8_t paridade;			//para calculo de paridade

//interrupcao de pevencao de erros no envio
ISR(TIMER0_OVF_vect) {		//se o mestre travar a comunicacao por um tempo muito longo
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
   
	interadorEnvio = 0;		//reinicia a transmissao no proximo clock
  4a:	10 92 65 00 	sts	0x0065, r1
   
}//fim da interrupcao de prevencao de erros no envio
  4e:	0f 90       	pop	r0
  50:	0f be       	out	0x3f, r0	; 63
  52:	0f 90       	pop	r0
  54:	1f 90       	pop	r1
  56:	18 95       	reti

00000058 <__vector_1>:

//interrupcao de envio
ISR(INT0_vect) {		//interrupcao INT0 AVR
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	2f 93       	push	r18
  64:	8f 93       	push	r24
  66:	9f 93       	push	r25
	
	uint8_t i = 2;
	nop(i);				//espera algum tempo
  68:	00 00       	nop
  6a:	00 00       	nop
   
	if (high()) {		//teste de clock contra ruidos
  6c:	b2 9b       	sbis	0x16, 2	; 22
  6e:	3a c0       	rjmp	.+116    	; 0xe4 <__vector_1+0x8c>
	   
		TCNT0 = 0;		//quando uma transmissao esta em andamento normal envita o overflow do timer0
  70:	12 be       	out	0x32, r1	; 50
	   	   
		//teste de primeiro envio
		if (interadorEnvio == 0) {	//se primeiro envio
  72:	20 91 65 00 	lds	r18, 0x0065
  76:	22 23       	and	r18, r18
  78:	69 f4       	brne	.+26     	; 0x94 <__vector_1+0x3c>
			envio = media;			//carrega temperatura medida no cache de envio
  7a:	80 91 69 00 	lds	r24, 0x0069
  7e:	90 91 6a 00 	lds	r25, 0x006A
  82:	90 93 67 00 	sts	0x0067, r25
  86:	80 93 66 00 	sts	0x0066, r24
			paridade = 0;			//inicializa o calculador de paridade
  8a:	10 92 68 00 	sts	0x0068, r1
			TCCR0B = 2;				//inicializa o timer para evitar erros no envio
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	83 bf       	out	0x33, r24	; 51
  92:	02 c0       	rjmp	.+4      	; 0x98 <__vector_1+0x40>
		}
		
		//teste de 10 bits enviados
		if ( interadorEnvio < 10) {	//se nao foi enviado os 10 bits
  94:	2a 30       	cpi	r18, 0x0A	; 10
  96:	e0 f4       	brcc	.+56     	; 0xd0 <__vector_1+0x78>
		   
			if (envio & (1 << 9)) {	//verifica se o bit mais significativo vale 1
  98:	80 91 66 00 	lds	r24, 0x0066
  9c:	90 91 67 00 	lds	r25, 0x0067
  a0:	91 ff       	sbrs	r25, 1
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <__vector_1+0x5a>
				data();				//se sim, envia nivel logico alto no pino de dados
  a4:	c1 9a       	sbi	0x18, 1	; 24
				paridade++;			//incrementa a paridade
  a6:	80 91 68 00 	lds	r24, 0x0068
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 68 00 	sts	0x0068, r24
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <__vector_1+0x5c>
			}
			
			else ndata();		//se nao, envia nivel logico baixo no pino de dados
  b2:	c1 98       	cbi	0x18, 1	; 24
			   
			envio = envio << 1;	//desloca o dado para enviar o proximo bit
  b4:	80 91 66 00 	lds	r24, 0x0066
  b8:	90 91 67 00 	lds	r25, 0x0067
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	90 93 67 00 	sts	0x0067, r25
  c4:	80 93 66 00 	sts	0x0066, r24
			interadorEnvio++;	//incrementa o interador de envio
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	20 93 65 00 	sts	0x0065, r18
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <__vector_1+0x8c>
			
		}//fim do teste de 10 bits enviados
		
		//calculo de paridade
		else {							//se foi enviado os 10 bits
			if ((paridade % 2)) data();	//se paridade for par, o decimo segundo bit sera 0
  d0:	80 91 68 00 	lds	r24, 0x0068
  d4:	80 ff       	sbrs	r24, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_1+0x84>
  d8:	c1 9a       	sbi	0x18, 1	; 24
  da:	01 c0       	rjmp	.+2      	; 0xde <__vector_1+0x86>
			else ndata();				//se paridade for impar, o decimo segundo bit sera 1
  dc:	c1 98       	cbi	0x18, 1	; 24
			interadorEnvio = 0;			//reinicia o interador de envios para proxima trasnmissao
  de:	10 92 65 00 	sts	0x0065, r1
			TCCR0B = 0;					//desliga o timer0 ao final de uma trasmissao bem sucedida
  e2:	13 be       	out	0x33, r1	; 51
			
		}//fim do calculo de paridade
		
	}//fim do teste de clock contra ruidos
	
}//fim da interrupcao de envio
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <leitura>:
}//fim da funcao de inicializacao

//funcao de leitura do sensor
uint16_t leitura() {

	ADCSRA = bv(ADEN)|bv(ADSC);	//habilita conversor analogico e inicia conversao
  f4:	80 ec       	ldi	r24, 0xC0	; 192
  f6:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA&bv(ADSC));		//aguarda final da conversao
  f8:	36 99       	sbic	0x06, 6	; 6
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <leitura+0x4>
	return ADC;					//retorna valor lido no sensor
  fc:	24 b1       	in	r18, 0x04	; 4
  fe:	35 b1       	in	r19, 0x05	; 5

}//fim da funcao de leitura do sensor
 100:	c9 01       	movw	r24, r18
 102:	08 95       	ret

00000104 <mediaMovel>:

void mediaMovel() {
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
}//fim da funcao de inicializacao

//funcao de leitura do sensor
uint16_t leitura() {

	ADCSRA = bv(ADEN)|bv(ADSC);	//habilita conversor analogico e inicia conversao
 108:	80 ec       	ldi	r24, 0xC0	; 192
 10a:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA&bv(ADSC));		//aguarda final da conversao
 10c:	36 99       	sbic	0x06, 6	; 6
 10e:	fe cf       	rjmp	.-4      	; 0x10c <mediaMovel+0x8>
	return ADC;					//retorna valor lido no sensor
 110:	04 b1       	in	r16, 0x04	; 4
 112:	15 b1       	in	r17, 0x05	; 5

void mediaMovel() {
	uint16_t aux = leitura();	//realiza a leitura do sensor
	   
	//algoritimo de media movel
	soma -= lidos[atual];		//retira do acumulador uma leitura antiga
 114:	20 91 60 00 	lds	r18, 0x0060
 118:	30 91 61 00 	lds	r19, 0x0061
 11c:	40 91 62 00 	lds	r20, 0x0062
 120:	50 91 63 00 	lds	r21, 0x0063
 124:	60 91 64 00 	lds	r22, 0x0064
 128:	e6 2f       	mov	r30, r22
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e5 59       	subi	r30, 0x95	; 149
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 81       	ld	r24, Z
 136:	91 81       	ldd	r25, Z+1	; 0x01
 138:	a0 e0       	ldi	r26, 0x00	; 0
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	28 1b       	sub	r18, r24
 13e:	39 0b       	sbc	r19, r25
 140:	4a 0b       	sbc	r20, r26
 142:	5b 0b       	sbc	r21, r27
 144:	20 93 60 00 	sts	0x0060, r18
 148:	30 93 61 00 	sts	0x0061, r19
 14c:	40 93 62 00 	sts	0x0062, r20
 150:	50 93 63 00 	sts	0x0063, r21
	soma += aux;				//faz o somatorio da nova leitura
 154:	20 91 60 00 	lds	r18, 0x0060
 158:	30 91 61 00 	lds	r19, 0x0061
 15c:	40 91 62 00 	lds	r20, 0x0062
 160:	50 91 63 00 	lds	r21, 0x0063
 164:	c8 01       	movw	r24, r16
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	82 0f       	add	r24, r18
 16c:	93 1f       	adc	r25, r19
 16e:	a4 1f       	adc	r26, r20
 170:	b5 1f       	adc	r27, r21
 172:	80 93 60 00 	sts	0x0060, r24
 176:	90 93 61 00 	sts	0x0061, r25
 17a:	a0 93 62 00 	sts	0x0062, r26
 17e:	b0 93 63 00 	sts	0x0063, r27
	lidos[atual] = aux;			//salva no espaco de leituras a leitura atual
 182:	11 83       	std	Z+1, r17	; 0x01
 184:	00 83       	st	Z, r16
	atual++;					//incrementa o interador de leitura
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	60 93 64 00 	sts	0x0064, r22
	media = soma / maxRead;		//tira a media das leituras
 18c:	60 91 60 00 	lds	r22, 0x0060
 190:	70 91 61 00 	lds	r23, 0x0061
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	90 91 63 00 	lds	r25, 0x0063
 19c:	24 e6       	ldi	r18, 0x64	; 100
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	39 d0       	rcall	.+114    	; 0x218 <__udivmodsi4>
 1a6:	30 93 6a 00 	sts	0x006A, r19
 1aa:	20 93 69 00 	sts	0x0069, r18

}
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <inicializacao>:
	return 0;
	
}//fim da funcao principal

//funcao de inicializacao
void inicializacao() {
 1b4:	eb e6       	ldi	r30, 0x6B	; 107
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
   
	//limpa o cache de leituras anteriores
	int i;
	for (i = 0; i < maxRead; i++)
		lidos[i] = 0;
 1b8:	11 92       	st	Z+, r1
 1ba:	11 92       	st	Z+, r1
//funcao de inicializacao
void inicializacao() {
   
	//limpa o cache de leituras anteriores
	int i;
	for (i = 0; i < maxRead; i++)
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	e3 33       	cpi	r30, 0x33	; 51
 1c0:	f8 07       	cpc	r31, r24
 1c2:	d1 f7       	brne	.-12     	; 0x1b8 <inicializacao+0x4>
		lidos[i] = 0;

	//comparador interno
	ACSR = bv(ACD);	//desabilita comparador interno
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	88 b9       	out	0x08, r24	; 8

	//conversor analogico/digital
	DIDR0 = bv(ADC3D);				//desabilita pino diginal em ADC3(PB3)
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	84 bb       	out	0x14, r24	; 20
	ADMUX = bv(REFS2)|(3<<REFS0)	//tensao de referencia interna de 2.3V disponivel no pino PB0
 1cc:	83 ed       	ldi	r24, 0xD3	; 211
 1ce:	87 b9       	out	0x07, r24	; 7
	        |3;						//conversor analogico lendo pino ADC3(PB3)

	//interrupcao para transmissao
	MCUCR = bv(ISC01)|bv(ISC00);	//configura interrupcao externa INT para deteccao da borda de subida
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	85 bf       	out	0x35, r24	; 53
	GIMSK = bv(INT0);				//habilita interrupcao externa INT
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	8b bf       	out	0x3b, r24	; 59

	//timer0 para evitar bloqueio da transmissao
	TIMSK = bv(TOIE0);		//interrupcao no overflow do timer 0
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	89 bf       	out	0x39, r24	; 57

	//pinos de comunicacao
	ndata();			//coloca nivel logico baixo no pino de dados
 1dc:	c1 98       	cbi	0x18, 1	; 24
	DDRB = bv(PB1);		//configura pino serial de saida de dados
 1de:	87 bb       	out	0x17, r24	; 23
 1e0:	88 ee       	ldi	r24, 0xE8	; 232
 1e2:	93 e0       	ldi	r25, 0x03	; 3
	
	i = 1000;
	nop(i);			//tempo para o sistema estabilizar
 1e4:	00 00       	nop
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	e9 f7       	brne	.-6      	; 0x1e4 <inicializacao+0x30>
	
	//interrupcoes globais
	sei();			//habilita interrupcoes globais
 1ea:	78 94       	sei

	//primeira leitura
	ADCSRA = bv(ADEN)|3; 		//acd com taxa de amostragem alta, 769mil amostras por segundo
 1ec:	83 e8       	ldi	r24, 0x83	; 131
 1ee:	86 b9       	out	0x06, r24	; 6
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <inicializacao+0x40>
	
	while (atual != maxRead)	//nas primeiras 100 leituras utiliza taxa de amostragem alta
		mediaMovel();
 1f2:	88 df       	rcall	.-240    	; 0x104 <mediaMovel>
	sei();			//habilita interrupcoes globais

	//primeira leitura
	ADCSRA = bv(ADEN)|3; 		//acd com taxa de amostragem alta, 769mil amostras por segundo
	
	while (atual != maxRead)	//nas primeiras 100 leituras utiliza taxa de amostragem alta
 1f4:	80 91 64 00 	lds	r24, 0x0064
 1f8:	84 36       	cpi	r24, 0x64	; 100
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <inicializacao+0x3e>
		mediaMovel();

	atual = 0;
 1fc:	10 92 64 00 	sts	0x0064, r1

	ADCSRA = bv(ADEN)|7; 		//acd com taxa de amostragem baixa, 769 amostras por segundo
 200:	87 e8       	ldi	r24, 0x87	; 135
 202:	86 b9       	out	0x06, r24	; 6

}//fim da funcao de inicializacao
 204:	08 95       	ret

00000206 <main>:
}//fim da interrupcao de envio

//funcao principal
int main() {
   
	inicializacao();
 206:	d6 df       	rcall	.-84     	; 0x1b4 <inicializacao>
   
	while (1) {

		mediaMovel();
 208:	7d df       	rcall	.-262    	; 0x104 <mediaMovel>
	   
		if (atual == maxRead)		//se o interador chegou no final do espaco de leituras
 20a:	80 91 64 00 	lds	r24, 0x0064
 20e:	84 36       	cpi	r24, 0x64	; 100
 210:	d9 f7       	brne	.-10     	; 0x208 <main+0x2>
			atual = 0;				//reinicia o interador
 212:	10 92 64 00 	sts	0x0064, r1
 216:	f8 cf       	rjmp	.-16     	; 0x208 <main+0x2>

00000218 <__udivmodsi4>:
 218:	a1 e2       	ldi	r26, 0x21	; 33
 21a:	1a 2e       	mov	r1, r26
 21c:	aa 1b       	sub	r26, r26
 21e:	bb 1b       	sub	r27, r27
 220:	fd 01       	movw	r30, r26
 222:	0d c0       	rjmp	.+26     	; 0x23e <__udivmodsi4_ep>

00000224 <__udivmodsi4_loop>:
 224:	aa 1f       	adc	r26, r26
 226:	bb 1f       	adc	r27, r27
 228:	ee 1f       	adc	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	a2 17       	cp	r26, r18
 22e:	b3 07       	cpc	r27, r19
 230:	e4 07       	cpc	r30, r20
 232:	f5 07       	cpc	r31, r21
 234:	20 f0       	brcs	.+8      	; 0x23e <__udivmodsi4_ep>
 236:	a2 1b       	sub	r26, r18
 238:	b3 0b       	sbc	r27, r19
 23a:	e4 0b       	sbc	r30, r20
 23c:	f5 0b       	sbc	r31, r21

0000023e <__udivmodsi4_ep>:
 23e:	66 1f       	adc	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	88 1f       	adc	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	1a 94       	dec	r1
 248:	69 f7       	brne	.-38     	; 0x224 <__udivmodsi4_loop>
 24a:	60 95       	com	r22
 24c:	70 95       	com	r23
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	9b 01       	movw	r18, r22
 254:	ac 01       	movw	r20, r24
 256:	bd 01       	movw	r22, r26
 258:	cf 01       	movw	r24, r30
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
